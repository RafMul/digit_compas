
digit_Compass_HMC5883L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000276c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a0  080028a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028a0  080028a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a0  080028a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080028b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080028b4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009311  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2f  00000000  00000000  00029346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aaa  00000000  00000000  0002bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b44c  00000000  00000000  00042a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080dcb  00000000  00000000  0004de5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cec29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c0  00000000  00000000  000cec7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002860 	.word	0x08002860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002860 	.word	0x08002860

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b43      	ldr	r3, [pc, #268]	; (8000270 <MX_GPIO_Init+0x124>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a42      	ldr	r2, [pc, #264]	; (8000270 <MX_GPIO_Init+0x124>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b40      	ldr	r3, [pc, #256]	; (8000270 <MX_GPIO_Init+0x124>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <MX_GPIO_Init+0x124>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a3c      	ldr	r2, [pc, #240]	; (8000270 <MX_GPIO_Init+0x124>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b3a      	ldr	r3, [pc, #232]	; (8000270 <MX_GPIO_Init+0x124>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b37      	ldr	r3, [pc, #220]	; (8000270 <MX_GPIO_Init+0x124>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a36      	ldr	r2, [pc, #216]	; (8000270 <MX_GPIO_Init+0x124>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b34      	ldr	r3, [pc, #208]	; (8000270 <MX_GPIO_Init+0x124>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b31      	ldr	r3, [pc, #196]	; (8000270 <MX_GPIO_Init+0x124>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a30      	ldr	r2, [pc, #192]	; (8000270 <MX_GPIO_Init+0x124>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b2e      	ldr	r3, [pc, #184]	; (8000270 <MX_GPIO_Init+0x124>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	482b      	ldr	r0, [pc, #172]	; (8000274 <MX_GPIO_Init+0x128>)
 80001c6:	f000 fdef 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b29      	ldr	r3, [pc, #164]	; (8000278 <MX_GPIO_Init+0x12c>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4827      	ldr	r0, [pc, #156]	; (800027c <MX_GPIO_Init+0x130>)
 80001e0:	f000 fc5e 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001e4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80001e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001ea:	2303      	movs	r3, #3
 80001ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	4821      	ldr	r0, [pc, #132]	; (800027c <MX_GPIO_Init+0x130>)
 80001f6:	f000 fc53 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80001fa:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 80001fe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000200:	2303      	movs	r3, #3
 8000202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	481a      	ldr	r0, [pc, #104]	; (8000274 <MX_GPIO_Init+0x128>)
 800020c:	f000 fc48 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000210:	2320      	movs	r3, #32
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4813      	ldr	r0, [pc, #76]	; (8000274 <MX_GPIO_Init+0x128>)
 8000228:	f000 fc3a 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800022c:	f64f 43f7 	movw	r3, #64759	; 0xfcf7
 8000230:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000232:	2303      	movs	r3, #3
 8000234:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4619      	mov	r1, r3
 800023c:	4810      	ldr	r0, [pc, #64]	; (8000280 <MX_GPIO_Init+0x134>)
 800023e:	f000 fc2f 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000242:	2304      	movs	r3, #4
 8000244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000246:	2303      	movs	r3, #3
 8000248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <MX_GPIO_Init+0x138>)
 8000252:	f000 fc25 	bl	8000aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2100      	movs	r1, #0
 800025a:	2028      	movs	r0, #40	; 0x28
 800025c:	f000 fbe9 	bl	8000a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000260:	2028      	movs	r0, #40	; 0x28
 8000262:	f000 fc02 	bl	8000a6a <HAL_NVIC_EnableIRQ>

}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	40010800 	.word	0x40010800
 8000278:	10110000 	.word	0x10110000
 800027c:	40011000 	.word	0x40011000
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011400 	.word	0x40011400

08000288 <Read8>:
#include "main.h"
#include "hmc5883l.h"


uint8_t Read8(HMC5883L_t *hmc , uint8_t Register)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af04      	add	r7, sp, #16
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(hmc->hmc5883l_i2c, (hmc->Address)<<1, Register, 1, &Value, 1,
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	791b      	ldrb	r3, [r3, #4]
 800029c:	b29b      	uxth	r3, r3
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	b299      	uxth	r1, r3
 80002a2:	78fb      	ldrb	r3, [r7, #3]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002aa:	9302      	str	r3, [sp, #8]
 80002ac:	2301      	movs	r3, #1
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	f107 030f 	add.w	r3, r7, #15
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2301      	movs	r3, #1
 80002b8:	f000 ffee 	bl	8001298 <HAL_I2C_Mem_Read>
			HMC5883L_i2c_timeout);
	return Value;
 80002bc:	7bfb      	ldrb	r3, [r7, #15]

}
 80002be:	4618      	mov	r0, r3
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <Write8>:
void Write8(HMC5883L_t *hmc , uint8_t Register , uint8_t Value)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af04      	add	r7, sp, #16
 80002cc:	6078      	str	r0, [r7, #4]
 80002ce:	460b      	mov	r3, r1
 80002d0:	70fb      	strb	r3, [r7, #3]
 80002d2:	4613      	mov	r3, r2
 80002d4:	70bb      	strb	r3, [r7, #2]

	HAL_I2C_Mem_Write(hmc->hmc5883l_i2c, (hmc->Address)<<1, Register, 1, &Value, 1,HMC5883L_i2c_timeout);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6818      	ldr	r0, [r3, #0]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	791b      	ldrb	r3, [r3, #4]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	b299      	uxth	r1, r3
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ec:	9302      	str	r3, [sp, #8]
 80002ee:	2301      	movs	r3, #1
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	1cbb      	adds	r3, r7, #2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2301      	movs	r3, #1
 80002f8:	f000 fed4 	bl	80010a4 <HAL_I2C_Mem_Write>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <HMC5883L_MeasureMode>:
// Configuration register A for HMC5883L

void HMC5883L_MeasureMode(HMC5883L_t *hmc , uint8_t Mode)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	if(Mode>3) Mode =3;
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b03      	cmp	r3, #3
 8000314:	d901      	bls.n	800031a <HMC5883L_MeasureMode+0x16>
 8000316:	2303      	movs	r3, #3
 8000318:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(hmc , HMC5883L_RA_CONFIG_A );
 800031a:	2100      	movs	r1, #0
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ffb3 	bl	8000288 <Read8>
 8000322:	4603      	mov	r3, r0
 8000324:	73fb      	strb	r3, [r7, #15]
	Tmp = Tmp |(Mode  << 0)	;
 8000326:	7bfa      	ldrb	r2, [r7, #15]
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	4313      	orrs	r3, r2
 800032c:	73fb      	strb	r3, [r7, #15]
	//Tmp = Tmp & 0xFC;
	//Tmp |= Mode ;

	Write8(hmc , HMC5883L_RA_CONFIG_A  ,Tmp);
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	461a      	mov	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f7ff ffc6 	bl	80002c6 <Write8>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}

08000342 <HMC5883L_DataOutputRate>:
void HMC5883L_DataOutputRate(HMC5883L_t *hmc , uint8_t Mode){
 8000342:	b580      	push	{r7, lr}
 8000344:	b084      	sub	sp, #16
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	460b      	mov	r3, r1
 800034c:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	Tmp = Read8(hmc , HMC5883L_RA_CONFIG_A );
 800034e:	2100      	movs	r1, #0
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff99 	bl	8000288 <Read8>
 8000356:	4603      	mov	r3, r0
 8000358:	73fb      	strb	r3, [r7, #15]
	Tmp = Tmp |(Mode << 2 )	;			// a = a | (1 << 3)
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	b25a      	sxtb	r2, r3
 8000360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000364:	4313      	orrs	r3, r2
 8000366:	b25b      	sxtb	r3, r3
 8000368:	73fb      	strb	r3, [r7, #15]

	Write8(hmc , HMC5883L_RA_CONFIG_A  ,Tmp);
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	461a      	mov	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ffa8 	bl	80002c6 <Write8>

}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <HMC5883L_Init>:
 */




uint8_t   HMC5883L_Init(HMC5883L_t *hmc, I2C_HandleTypeDef *i2c, uint8_t Address  ) {
 800037e:	b580      	push	{r7, lr}
 8000380:	b086      	sub	sp, #24
 8000382:	af00      	add	r7, sp, #0
 8000384:	60f8      	str	r0, [r7, #12]
 8000386:	60b9      	str	r1, [r7, #8]
 8000388:	4613      	mov	r3, r2
 800038a:	71fb      	strb	r3, [r7, #7]

	uint8_t RA;
	uint8_t RB;
	uint8_t RC;
	uint8_t RD;
	hmc-> hmc5883l_i2c = i2c;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	68ba      	ldr	r2, [r7, #8]
 8000390:	601a      	str	r2, [r3, #0]
	hmc-> Address = Address;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	79fa      	ldrb	r2, [r7, #7]
 8000396:	711a      	strb	r2, [r3, #4]

	RA = Read8(hmc,HMC5883L_RA_CONFIG_A   );
 8000398:	2100      	movs	r1, #0
 800039a:	68f8      	ldr	r0, [r7, #12]
 800039c:	f7ff ff74 	bl	8000288 <Read8>
 80003a0:	4603      	mov	r3, r0
 80003a2:	75fb      	strb	r3, [r7, #23]
	RB = Read8(hmc,HMC5883L_RA_ID_B   );
 80003a4:	210b      	movs	r1, #11
 80003a6:	68f8      	ldr	r0, [r7, #12]
 80003a8:	f7ff ff6e 	bl	8000288 <Read8>
 80003ac:	4603      	mov	r3, r0
 80003ae:	75bb      	strb	r3, [r7, #22]
	RC = Read8(hmc,HMC5883L_RA_ID_C    );
 80003b0:	210c      	movs	r1, #12
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff ff68 	bl	8000288 <Read8>
 80003b8:	4603      	mov	r3, r0
 80003ba:	757b      	strb	r3, [r7, #21]
	RD = Read8(hmc,HMC5883L_RA_MODE   );
 80003bc:	2102      	movs	r1, #2
 80003be:	68f8      	ldr	r0, [r7, #12]
 80003c0:	f7ff ff62 	bl	8000288 <Read8>
 80003c4:	4603      	mov	r3, r0
 80003c6:	753b      	strb	r3, [r7, #20]

	if (RA  == 15)  //ASCII "H"
 80003c8:	7dfb      	ldrb	r3, [r7, #23]
 80003ca:	2b0f      	cmp	r3, #15
 80003cc:	d101      	bne.n	80003d2 <HMC5883L_Init+0x54>
	{
		return 1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	e022      	b.n	8000418 <HMC5883L_Init+0x9a>

	}
	if (RB == 1){
 80003d2:	7dbb      	ldrb	r3, [r7, #22]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d101      	bne.n	80003dc <HMC5883L_Init+0x5e>
		return 1;
 80003d8:	2301      	movs	r3, #1
 80003da:	e01d      	b.n	8000418 <HMC5883L_Init+0x9a>
	}
	if (RC  == 1){
 80003dc:	7d7b      	ldrb	r3, [r7, #21]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d101      	bne.n	80003e6 <HMC5883L_Init+0x68>
		return 1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	e018      	b.n	8000418 <HMC5883L_Init+0x9a>
	}
	if (RD == 1){
 80003e6:	7d3b      	ldrb	r3, [r7, #20]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d101      	bne.n	80003f0 <HMC5883L_Init+0x72>
		return 1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	e013      	b.n	8000418 <HMC5883L_Init+0x9a>
	}

	HMC5883L_DataOutputRate(hmc,1);
 80003f0:	2101      	movs	r1, #1
 80003f2:	68f8      	ldr	r0, [r7, #12]
 80003f4:	f7ff ffa5 	bl	8000342 <HMC5883L_DataOutputRate>
 	HMC5883L_MeasureMode(hmc , 1);
 80003f8:	2101      	movs	r1, #1
 80003fa:	68f8      	ldr	r0, [r7, #12]
 80003fc:	f7ff ff82 	bl	8000304 <HMC5883L_MeasureMode>

 	RD =Read8(hmc,HMC5883L_RA_CONFIG_A   );
 8000400:	2100      	movs	r1, #0
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff40 	bl	8000288 <Read8>
 8000408:	4603      	mov	r3, r0
 800040a:	753b      	strb	r3, [r7, #20]
 	if (RD == 0x20)
 800040c:	7d3b      	ldrb	r3, [r7, #20]
 800040e:	2b20      	cmp	r3, #32
 8000410:	d101      	bne.n	8000416 <HMC5883L_Init+0x98>
 	{
 		return 1;
 8000412:	2301      	movs	r3, #1
 8000414:	e000      	b.n	8000418 <HMC5883L_Init+0x9a>

 	}
 	return 0;
 8000416:	2300      	movs	r3, #0
    // write CONFIG_B register
    //HMC5883L_setGain(HMC5883L_GAIN_1090);

    // write MODE register
    //HMC5883L_setMode(HMC5883L_MODE_SINGLE);
}
 8000418:	4618      	mov	r0, r3
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_I2C1_Init+0x50>)
 8000426:	4a13      	ldr	r2, [pc, #76]	; (8000474 <MX_I2C1_Init+0x54>)
 8000428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_I2C1_Init+0x50>)
 800042c:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_I2C1_Init+0x58>)
 800042e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_I2C1_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_I2C1_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_I2C1_Init+0x50>)
 800043e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_I2C1_Init+0x50>)
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_I2C1_Init+0x50>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <MX_I2C1_Init+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_I2C1_Init+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_I2C1_Init+0x50>)
 800045e:	f000 fcdd 	bl	8000e1c <HAL_I2C_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000468:	f000 f8af 	bl	80005ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000028 	.word	0x20000028
 8000474:	40005400 	.word	0x40005400
 8000478:	000186a0 	.word	0x000186a0

0800047c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a1d      	ldr	r2, [pc, #116]	; (800050c <HAL_I2C_MspInit+0x90>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d132      	bne.n	8000502 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <HAL_I2C_MspInit+0x94>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <HAL_I2C_MspInit+0x94>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <HAL_I2C_MspInit+0x94>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ba:	2312      	movs	r3, #18
 80004bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4812      	ldr	r0, [pc, #72]	; (8000514 <HAL_I2C_MspInit+0x98>)
 80004ca:	f000 fae9 	bl	8000aa0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_I2C_MspInit+0x9c>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
 80004d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
 80004dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004de:	f043 0302 	orr.w	r3, r3, #2
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <HAL_I2C_MspInit+0x9c>)
 80004e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_I2C_MspInit+0x94>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <HAL_I2C_MspInit+0x94>)
 80004f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_I2C_MspInit+0x94>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	; 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40005400 	.word	0x40005400
 8000510:	40021000 	.word	0x40021000
 8000514:	40010c00 	.word	0x40010c00
 8000518:	40010000 	.word	0x40010000

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 f94e 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f810 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f7ff fe10 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f8ba 	bl	80006a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000530:	f7ff ff76 	bl	8000420 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HMC5883L_Init(&Hmc5883l, &hi2c1, HMC5883L_ADDRESS);
 8000534:	221e      	movs	r2, #30
 8000536:	4902      	ldr	r1, [pc, #8]	; (8000540 <main+0x24>)
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <main+0x28>)
 800053a:	f7ff ff20 	bl	800037e <HMC5883L_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x22>
 8000540:	20000028 	.word	0x20000028
 8000544:	2000007c 	.word	0x2000007c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b090      	sub	sp, #64	; 0x40
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 f97a 	bl	8002850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2310      	movs	r3, #16
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800057a:	2300      	movs	r3, #0
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800057e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fc47 	bl	8001e1c <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000594:	f000 f819 	bl	80005ca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 feb2 	bl	800231c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005be:	f000 f804 	bl	80005ca <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3740      	adds	r7, #64	; 0x40
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ce:	b672      	cpsid	i
}
 80005d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <Error_Handler+0x8>

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_MspInit+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_MspInit+0x5c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_MspInit+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x5c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_MspInit+0x5c>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x5c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_MspInit+0x60>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_MspInit+0x60>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f8e5 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}

08000686 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800068a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800068e:	f000 fba3 	bl	8000dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
	...

080006a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f001 ffb8 	bl	8002650 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f7ff ff70 	bl	80005ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084
 80006f4:	40004400 	.word	0x40004400

080006f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <HAL_UART_MspInit+0x70>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d123      	bne.n	8000760 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_UART_MspInit+0x74>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	4a13      	ldr	r2, [pc, #76]	; (800076c <HAL_UART_MspInit+0x74>)
 800071e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000722:	61d3      	str	r3, [r2, #28]
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_UART_MspInit+0x74>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_UART_MspInit+0x74>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <HAL_UART_MspInit+0x74>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <HAL_UART_MspInit+0x74>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000748:	230c      	movs	r3, #12
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_UART_MspInit+0x78>)
 800075c:	f000 f9a0 	bl	8000aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40004400 	.word	0x40004400
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ff7c 	bl	8000696 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 f833 	bl	8002808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff febb 	bl	800051c <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b0:	080028a8 	.word	0x080028a8
  ldr r2, =_sbss
 80007b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b8:	200000cc 	.word	0x200000cc

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f923 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fefa 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f93b 	bl	8000a86 <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000828:	f000 f903 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x1c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_IncTick+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <HAL_IncTick+0x20>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000008 	.word	0x20000008
 800086c:	200000c8 	.word	0x200000c8

08000870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	200000c8 	.word	0x200000c8

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <__NVIC_EnableIRQ+0x34>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	f7ff ff90 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff2d 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff42 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5f 	bl	8000920 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff35 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffa2 	bl	80009d8 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e169      	b.n	8000d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8158 	bne.w	8000d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d05e      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000adc:	4a98      	ldr	r2, [pc, #608]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d875      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000ae2:	4a98      	ldr	r2, [pc, #608]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d058      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000ae8:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86f      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000aee:	4a96      	ldr	r2, [pc, #600]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d052      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000af4:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d869      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000afa:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d04c      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d863      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b06:	4a92      	ldr	r2, [pc, #584]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d046      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b0c:	4a90      	ldr	r2, [pc, #576]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d85d      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d82a      	bhi.n	8000b6c <HAL_GPIO_Init+0xcc>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d859      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <HAL_GPIO_Init+0x80>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b75 	.word	0x08000b75
 8000b28:	08000b87 	.word	0x08000b87
 8000b2c:	08000bc9 	.word	0x08000bc9
 8000b30:	08000bcf 	.word	0x08000bcf
 8000b34:	08000bcf 	.word	0x08000bcf
 8000b38:	08000bcf 	.word	0x08000bcf
 8000b3c:	08000bcf 	.word	0x08000bcf
 8000b40:	08000bcf 	.word	0x08000bcf
 8000b44:	08000bcf 	.word	0x08000bcf
 8000b48:	08000bcf 	.word	0x08000bcf
 8000b4c:	08000bcf 	.word	0x08000bcf
 8000b50:	08000bcf 	.word	0x08000bcf
 8000b54:	08000bcf 	.word	0x08000bcf
 8000b58:	08000bcf 	.word	0x08000bcf
 8000b5c:	08000bcf 	.word	0x08000bcf
 8000b60:	08000bcf 	.word	0x08000bcf
 8000b64:	08000b7d 	.word	0x08000b7d
 8000b68:	08000b91 	.word	0x08000b91
 8000b6c:	4a79      	ldr	r2, [pc, #484]	; (8000d54 <HAL_GPIO_Init+0x2b4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e029      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e024      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01f      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e01a      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e013      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e009      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e003      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e000      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          break;
 8000bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d801      	bhi.n	8000bda <HAL_GPIO_Init+0x13a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_Init+0x13e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d802      	bhi.n	8000bec <HAL_GPIO_Init+0x14c>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x152>
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	6a39      	ldr	r1, [r7, #32]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80b1 	beq.w	8000d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c38:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d013      	beq.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1e8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	; (8000d68 <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1e4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1e0>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	492f      	ldr	r1, [pc, #188]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	492c      	ldr	r1, [pc, #176]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4922      	ldr	r1, [pc, #136]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4918      	ldr	r1, [pc, #96]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4914      	ldr	r1, [pc, #80]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
 8000d3c:	e021      	b.n	8000d82 <HAL_GPIO_Init+0x2e2>
 8000d3e:	bf00      	nop
 8000d40:	10320000 	.word	0x10320000
 8000d44:	10310000 	.word	0x10310000
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	10120000 	.word	0x10120000
 8000d54:	10110000 	.word	0x10110000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40011400 	.word	0x40011400
 8000d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f47f ae8e 	bne.w	8000ab4 <HAL_GPIO_Init+0x14>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	372c      	adds	r7, #44	; 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc4:	e003      	b.n	8000dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	611a      	str	r2, [r3, #16]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f806 	bl	8000e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010400 	.word	0x40010400

08000e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e12b      	b.n	8001086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fb1a 	bl	800047c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2224      	movs	r2, #36	; 0x24
 8000e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e80:	f001 fba0 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8000e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a81      	ldr	r2, [pc, #516]	; (8001090 <HAL_I2C_Init+0x274>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d807      	bhi.n	8000ea0 <HAL_I2C_Init+0x84>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4a80      	ldr	r2, [pc, #512]	; (8001094 <HAL_I2C_Init+0x278>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	bf94      	ite	ls
 8000e98:	2301      	movls	r3, #1
 8000e9a:	2300      	movhi	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e006      	b.n	8000eae <HAL_I2C_Init+0x92>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4a7d      	ldr	r2, [pc, #500]	; (8001098 <HAL_I2C_Init+0x27c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	bf94      	ite	ls
 8000ea8:	2301      	movls	r3, #1
 8000eaa:	2300      	movhi	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0e7      	b.n	8001086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4a78      	ldr	r2, [pc, #480]	; (800109c <HAL_I2C_Init+0x280>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0c9b      	lsrs	r3, r3, #18
 8000ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4a6a      	ldr	r2, [pc, #424]	; (8001090 <HAL_I2C_Init+0x274>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d802      	bhi.n	8000ef0 <HAL_I2C_Init+0xd4>
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3301      	adds	r3, #1
 8000eee:	e009      	b.n	8000f04 <HAL_I2C_Init+0xe8>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <HAL_I2C_Init+0x284>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	099b      	lsrs	r3, r3, #6
 8000f02:	3301      	adds	r3, #1
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	495c      	ldr	r1, [pc, #368]	; (8001090 <HAL_I2C_Init+0x274>)
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d819      	bhi.n	8000f58 <HAL_I2C_Init+0x13c>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1e59      	subs	r1, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f32:	1c59      	adds	r1, r3, #1
 8000f34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f38:	400b      	ands	r3, r1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00a      	beq.n	8000f54 <HAL_I2C_Init+0x138>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1e59      	subs	r1, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f52:	e051      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e04f      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d111      	bne.n	8000f84 <HAL_I2C_Init+0x168>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1e58      	subs	r0, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	440b      	add	r3, r1
 8000f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2301      	moveq	r3, #1
 8000f7e:	2300      	movne	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	e012      	b.n	8000faa <HAL_I2C_Init+0x18e>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	1e58      	subs	r0, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6859      	ldr	r1, [r3, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	0099      	lsls	r1, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Init+0x196>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e022      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_I2C_Init+0x1bc>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1e58      	subs	r0, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6859      	ldr	r1, [r3, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	440b      	add	r3, r1
 8000fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd6:	e00f      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	0099      	lsls	r1, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	6809      	ldr	r1, [r1, #0]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6911      	ldr	r1, [r2, #16]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68d2      	ldr	r2, [r2, #12]
 8001032:	4311      	orrs	r1, r2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	430b      	orrs	r3, r1
 800103a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2220      	movs	r2, #32
 8001072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	000186a0 	.word	0x000186a0
 8001094:	001e847f 	.word	0x001e847f
 8001098:	003d08ff 	.word	0x003d08ff
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	10624dd3 	.word	0x10624dd3

080010a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4603      	mov	r3, r0
 80010b4:	817b      	strh	r3, [r7, #10]
 80010b6:	460b      	mov	r3, r1
 80010b8:	813b      	strh	r3, [r7, #8]
 80010ba:	4613      	mov	r3, r2
 80010bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010be:	f7ff fbd7 	bl	8000870 <HAL_GetTick>
 80010c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	f040 80d9 	bne.w	8001284 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2319      	movs	r3, #25
 80010d8:	2201      	movs	r2, #1
 80010da:	496d      	ldr	r1, [pc, #436]	; (8001290 <HAL_I2C_Mem_Write+0x1ec>)
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fcc1 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80010e8:	2302      	movs	r3, #2
 80010ea:	e0cc      	b.n	8001286 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_I2C_Mem_Write+0x56>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e0c5      	b.n	8001286 <HAL_I2C_Mem_Write+0x1e2>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d007      	beq.n	8001120 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800112e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2221      	movs	r2, #33	; 0x21
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a3a      	ldr	r2, [r7, #32]
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001150:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001156:	b29a      	uxth	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <HAL_I2C_Mem_Write+0x1f0>)
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001162:	88f8      	ldrh	r0, [r7, #6]
 8001164:	893a      	ldrh	r2, [r7, #8]
 8001166:	8979      	ldrh	r1, [r7, #10]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 faf8 	bl	8001768 <I2C_RequestMemoryWrite>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d052      	beq.n	8001224 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e081      	b.n	8001286 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 fd42 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00d      	beq.n	80011ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2b04      	cmp	r3, #4
 8001198:	d107      	bne.n	80011aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06b      	b.n	8001286 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d11b      	bne.n	8001224 <HAL_I2C_Mem_Write+0x180>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d017      	beq.n	8001224 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120e:	3b01      	subs	r3, #1
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1aa      	bne.n	8001182 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 fd2e 	bl	8001c92 <I2C_WaitOnBTFFlagUntilTimeout>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00d      	beq.n	8001258 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2b04      	cmp	r3, #4
 8001242:	d107      	bne.n	8001254 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001252:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e016      	b.n	8001286 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2220      	movs	r2, #32
 800126c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001284:	2302      	movs	r3, #2
  }
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	00100002 	.word	0x00100002
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	817b      	strh	r3, [r7, #10]
 80012aa:	460b      	mov	r3, r1
 80012ac:	813b      	strh	r3, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012b6:	f7ff fadb 	bl	8000870 <HAL_GetTick>
 80012ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	f040 8244 	bne.w	8001752 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2319      	movs	r3, #25
 80012d0:	2201      	movs	r2, #1
 80012d2:	4982      	ldr	r1, [pc, #520]	; (80014dc <HAL_I2C_Mem_Read+0x244>)
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fbc5 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e237      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Mem_Read+0x5a>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e230      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2222      	movs	r2, #34	; 0x22
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a62      	ldr	r2, [pc, #392]	; (80014e0 <HAL_I2C_Mem_Read+0x248>)
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800135a:	88f8      	ldrh	r0, [r7, #6]
 800135c:	893a      	ldrh	r2, [r7, #8]
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4603      	mov	r3, r0
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fa92 	bl	8001894 <I2C_RequestMemoryRead>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1ec      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	d113      	bne.n	80013aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e1c0      	b.n	800172c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d11e      	bne.n	80013f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013c2:	b672      	cpsid	i
}
 80013c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013ec:	b662      	cpsie	i
}
 80013ee:	e035      	b.n	800145c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d11e      	bne.n	8001436 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001430:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001432:	b662      	cpsie	i
}
 8001434:	e012      	b.n	800145c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001444:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800145c:	e166      	b.n	800172c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001462:	2b03      	cmp	r3, #3
 8001464:	f200 811f 	bhi.w	80016a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	2b01      	cmp	r3, #1
 800146e:	d123      	bne.n	80014b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 fc4d 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e167      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014b6:	e139      	b.n	800172c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d152      	bne.n	8001566 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	2200      	movs	r2, #0
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <HAL_I2C_Mem_Read+0x24c>)
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 faca 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e13c      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
 80014da:	bf00      	nop
 80014dc:	00100002 	.word	0x00100002
 80014e0:	ffff0000 	.word	0xffff0000
 80014e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	3b01      	subs	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001524:	b29b      	uxth	r3, r3
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800152e:	b662      	cpsie	i
}
 8001530:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001564:	e0e2      	b.n	800172c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156c:	2200      	movs	r2, #0
 800156e:	497b      	ldr	r1, [pc, #492]	; (800175c <HAL_I2C_Mem_Read+0x4c4>)
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fa77 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0e9      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800158e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	3b01      	subs	r3, #1
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015c6:	4b66      	ldr	r3, [pc, #408]	; (8001760 <HAL_I2C_Mem_Read+0x4c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_I2C_Mem_Read+0x4cc>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a1a      	lsrs	r2, r3, #8
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00da      	lsls	r2, r3, #3
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d118      	bne.n	800161e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f043 0220 	orr.w	r2, r3, #32
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800160e:	b662      	cpsie	i
}
 8001610:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e09a      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b04      	cmp	r3, #4
 800162a:	d1d9      	bne.n	80015e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800166e:	b662      	cpsie	i
}
 8001670:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016a4:	e042      	b.n	800172c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fb32 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e04c      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d118      	bne.n	800172c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f ae94 	bne.w	800145e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
  }
}
 8001754:	4618      	mov	r0, r3
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	00010004 	.word	0x00010004
 8001760:	20000000 	.word	0x20000000
 8001764:	14f8b589 	.word	0x14f8b589

08001768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af02      	add	r7, sp, #8
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	817b      	strh	r3, [r7, #10]
 800177a:	460b      	mov	r3, r1
 800177c:	813b      	strh	r3, [r7, #8]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	2200      	movs	r2, #0
 800179a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f960 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00d      	beq.n	80017c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b8:	d103      	bne.n	80017c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e05f      	b.n	8001886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017c6:	897b      	ldrh	r3, [r7, #10]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6a3a      	ldr	r2, [r7, #32]
 80017da:	492d      	ldr	r1, [pc, #180]	; (8001890 <I2C_RequestMemoryWrite+0x128>)
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f998 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e04c      	b.n	8001886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	6a39      	ldr	r1, [r7, #32]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fa02 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00d      	beq.n	800182e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b04      	cmp	r3, #4
 8001818:	d107      	bne.n	800182a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e02b      	b.n	8001886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001834:	893b      	ldrh	r3, [r7, #8]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	e021      	b.n	8001884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001840:	893b      	ldrh	r3, [r7, #8]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800184e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f9dc 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2b04      	cmp	r3, #4
 8001864:	d107      	bne.n	8001876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e005      	b.n	8001886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800187a:	893b      	ldrh	r3, [r7, #8]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	00010002 	.word	0x00010002

08001894 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	4608      	mov	r0, r1
 800189e:	4611      	mov	r1, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	817b      	strh	r3, [r7, #10]
 80018a6:	460b      	mov	r3, r1
 80018a8:	813b      	strh	r3, [r7, #8]
 80018aa:	4613      	mov	r3, r2
 80018ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f8c2 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f4:	d103      	bne.n	80018fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0aa      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001902:	897b      	ldrh	r3, [r7, #10]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	6a3a      	ldr	r2, [r7, #32]
 8001916:	4952      	ldr	r1, [pc, #328]	; (8001a60 <I2C_RequestMemoryRead+0x1cc>)
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f8fa 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e097      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	6a39      	ldr	r1, [r7, #32]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f964 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00d      	beq.n	800196a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b04      	cmp	r3, #4
 8001954:	d107      	bne.n	8001966 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e076      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	e021      	b.n	80019c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2da      	uxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f93e 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00d      	beq.n	80019b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d107      	bne.n	80019b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e050      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019b6:	893b      	ldrh	r3, [r7, #8]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c2:	6a39      	ldr	r1, [r7, #32]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f923 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d107      	bne.n	80019e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e035      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f82b 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a22:	d103      	bne.n	8001a2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e013      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <I2C_RequestMemoryRead+0x1cc>)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f863 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	00010002 	.word	0x00010002

08001a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a74:	e025      	b.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a7c:	d021      	beq.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7fe fef7 	bl	8000870 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d116      	bne.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e023      	b.n	8001b0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10d      	bne.n	8001ae8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	e00c      	b.n	8001b02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4013      	ands	r3, r2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d0b6      	beq.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b20:	e051      	b.n	8001bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d123      	bne.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f043 0204 	orr.w	r2, r3, #4
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e046      	b.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d021      	beq.n	8001bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7fe fe75 	bl	8000870 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d116      	bne.n	8001bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0220 	orr.w	r2, r3, #32
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e020      	b.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10c      	bne.n	8001bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	e00b      	b.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d18d      	bne.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c1c:	e02d      	b.n	8001c7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f8ce 	bl	8001dc0 <I2C_IsAcknowledgeFailed>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e02d      	b.n	8001c8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c34:	d021      	beq.n	8001c7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c36:	f7fe fe1b 	bl	8000870 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d302      	bcc.n	8001c4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d116      	bne.n	8001c7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f043 0220 	orr.w	r2, r3, #32
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e007      	b.n	8001c8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d1ca      	bne.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c9e:	e02d      	b.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f88d 	bl	8001dc0 <I2C_IsAcknowledgeFailed>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e02d      	b.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb6:	d021      	beq.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb8:	f7fe fdda 	bl	8000870 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d302      	bcc.n	8001cce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d116      	bne.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 0220 	orr.w	r2, r3, #32
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e007      	b.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d1ca      	bne.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d20:	e042      	b.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d119      	bne.n	8001d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e029      	b.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d64:	f7fe fd84 	bl	8000870 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d302      	bcc.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e007      	b.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b40      	cmp	r3, #64	; 0x40
 8001db4:	d1b5      	bne.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd6:	d11b      	bne.n	8001e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f043 0204 	orr.w	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e26c      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3c:	4b92      	ldr	r3, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e48:	4b8f      	ldr	r3, [pc, #572]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d112      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
 8001e54:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d06c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x12c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d168      	bne.n	8001f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e246      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x76>
 8001e84:	4b80      	ldr	r3, [pc, #512]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a7f      	ldr	r2, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e02e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7a      	ldr	r2, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b78      	ldr	r3, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a77      	ldr	r2, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xbc>
 8001ebe:	4b72      	ldr	r3, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a71      	ldr	r2, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a67      	ldr	r2, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fcba 	bl	8000870 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe fcb6 	bl	8000870 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1fa      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe4>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fca6 	bl	8000870 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7fe fca2 	bl	8000870 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1e6      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x10c>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1ba      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4939      	ldr	r1, [pc, #228]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fc5b 	bl	8000870 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fc57 	bl	8000870 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e19b      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4927      	ldr	r1, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fc3a 	bl	8000870 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe fc36 	bl	8000870 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e17a      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03a      	beq.n	80020a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7fe fc1a 	bl	8000870 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe fc16 	bl	8000870 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e15a      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205e:	2001      	movs	r0, #1
 8002060:	f000 fad8 	bl	8002614 <RCC_Delay>
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe fc00 	bl	8000870 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	e00f      	b.n	8002094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fbfc 	bl	8000870 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d908      	bls.n	8002094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e140      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	42420000 	.word	0x42420000
 8002090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b9e      	ldr	r3, [pc, #632]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e9      	bne.n	8002074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a6 	beq.w	80021fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b97      	ldr	r3, [pc, #604]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a93      	ldr	r2, [pc, #588]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b91      	ldr	r3, [pc, #580]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b8b      	ldr	r3, [pc, #556]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a8a      	ldr	r2, [pc, #552]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fbbd 	bl	8000870 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7fe fbb9 	bl	8000870 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0fd      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b81      	ldr	r3, [pc, #516]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x312>
 8002120:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a7a      	ldr	r2, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	e02d      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002136:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a75      	ldr	r2, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	e01c      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x356>
 8002158:	4b6d      	ldr	r3, [pc, #436]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a6c      	ldr	r2, [pc, #432]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e00b      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a63      	ldr	r2, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d015      	beq.n	80021be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fb6d 	bl	8000870 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fb69 	bl	8000870 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0ab      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	4b57      	ldr	r3, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ee      	beq.n	800219a <HAL_RCC_OscConfig+0x37e>
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe fb57 	bl	8000870 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fb53 	bl	8000870 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e095      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ee:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8081 	beq.w	8002306 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d061      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d146      	bne.n	80022a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_OscConfig+0x4fc>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fb27 	bl	8000870 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fb23 	bl	8000870 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e067      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	492d      	ldr	r1, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a19      	ldr	r1, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	430b      	orrs	r3, r1
 8002272:	4927      	ldr	r1, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x4fc>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe faf7 	bl	8000870 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe faf3 	bl	8000870 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e037      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x46a>
 80022a4:	e02f      	b.n	8002306 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_RCC_OscConfig+0x4fc>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fae0 	bl	8000870 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fadc 	bl	8000870 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e020      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x498>
 80022d2:	e018      	b.n	8002306 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e013      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	42420060 	.word	0x42420060

0800231c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800239a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	494d      	ldr	r1, [pc, #308]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d040      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e073      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4936      	ldr	r1, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fa30 	bl	8000870 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7fe fa2c 	bl	8000870 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e053      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d210      	bcs.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1cc>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f98e 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08002888 	.word	0x08002888
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b490      	push	{r4, r7}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024f6:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024f8:	1d3c      	adds	r4, r7, #4
 80024fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002500:	f240 2301 	movw	r3, #513	; 0x201
 8002504:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x40>
 800252a:	2b08      	cmp	r3, #8
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x46>
 800252e:	e02d      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002532:	623b      	str	r3, [r7, #32]
      break;
 8002534:	e02d      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	0c9b      	lsrs	r3, r3, #18
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002542:	4413      	add	r3, r2
 8002544:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002548:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c5b      	lsrs	r3, r3, #17
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002562:	4413      	add	r3, r2
 8002564:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002568:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256e:	fb02 f203 	mul.w	r2, r2, r3
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	e004      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	623b      	str	r3, [r7, #32]
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258e:	623b      	str	r3, [r7, #32]
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	6a3b      	ldr	r3, [r7, #32]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc90      	pop	{r4, r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	08002878 	.word	0x08002878
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	003d0900 	.word	0x003d0900

080025b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff2 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08002898 	.word	0x08002898

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0adb      	lsrs	r3, r3, #11
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	08002898 	.word	0x08002898

08002614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <RCC_Delay+0x34>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <RCC_Delay+0x38>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0a5b      	lsrs	r3, r3, #9
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002630:	bf00      	nop
  }
  while (Delay --);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	60fa      	str	r2, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <RCC_Delay+0x1c>
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000000 	.word	0x20000000
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e03f      	b.n	80026e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f83e 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f829 	bl	80026ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002726:	f023 030c 	bic.w	r3, r3, #12
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	430b      	orrs	r3, r1
 8002732:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2c      	ldr	r2, [pc, #176]	; (8002800 <UART_SetConfig+0x114>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d103      	bne.n	800275c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002754:	f7ff ff4a 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	e002      	b.n	8002762 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7ff ff32 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8002760:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <UART_SetConfig+0x118>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	0119      	lsls	r1, r3, #4
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fbb2 f2f3 	udiv	r2, r2, r3
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <UART_SetConfig+0x118>)
 800279a:	fba3 0302 	umull	r0, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	fb00 f303 	mul.w	r3, r0, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	3332      	adds	r3, #50	; 0x32
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <UART_SetConfig+0x118>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b8:	4419      	add	r1, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009a      	lsls	r2, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <UART_SetConfig+0x118>)
 80027d2:	fba3 0302 	umull	r0, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2064      	movs	r0, #100	; 0x64
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <UART_SetConfig+0x118>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	440a      	add	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40013800 	.word	0x40013800
 8002804:	51eb851f 	.word	0x51eb851f

08002808 <__libc_init_array>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	2600      	movs	r6, #0
 800280c:	4d0c      	ldr	r5, [pc, #48]	; (8002840 <__libc_init_array+0x38>)
 800280e:	4c0d      	ldr	r4, [pc, #52]	; (8002844 <__libc_init_array+0x3c>)
 8002810:	1b64      	subs	r4, r4, r5
 8002812:	10a4      	asrs	r4, r4, #2
 8002814:	42a6      	cmp	r6, r4
 8002816:	d109      	bne.n	800282c <__libc_init_array+0x24>
 8002818:	f000 f822 	bl	8002860 <_init>
 800281c:	2600      	movs	r6, #0
 800281e:	4d0a      	ldr	r5, [pc, #40]	; (8002848 <__libc_init_array+0x40>)
 8002820:	4c0a      	ldr	r4, [pc, #40]	; (800284c <__libc_init_array+0x44>)
 8002822:	1b64      	subs	r4, r4, r5
 8002824:	10a4      	asrs	r4, r4, #2
 8002826:	42a6      	cmp	r6, r4
 8002828:	d105      	bne.n	8002836 <__libc_init_array+0x2e>
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002830:	4798      	blx	r3
 8002832:	3601      	adds	r6, #1
 8002834:	e7ee      	b.n	8002814 <__libc_init_array+0xc>
 8002836:	f855 3b04 	ldr.w	r3, [r5], #4
 800283a:	4798      	blx	r3
 800283c:	3601      	adds	r6, #1
 800283e:	e7f2      	b.n	8002826 <__libc_init_array+0x1e>
 8002840:	080028a0 	.word	0x080028a0
 8002844:	080028a0 	.word	0x080028a0
 8002848:	080028a0 	.word	0x080028a0
 800284c:	080028a4 	.word	0x080028a4

08002850 <memset>:
 8002850:	4603      	mov	r3, r0
 8002852:	4402      	add	r2, r0
 8002854:	4293      	cmp	r3, r2
 8002856:	d100      	bne.n	800285a <memset+0xa>
 8002858:	4770      	bx	lr
 800285a:	f803 1b01 	strb.w	r1, [r3], #1
 800285e:	e7f9      	b.n	8002854 <memset+0x4>

08002860 <_init>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr

0800286c <_fini>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr
